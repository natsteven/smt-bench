(set-logic QF_S)
(set-option :parse-transducers true)
(set-option :produce-models true)
(define-fun-rec toLower ((x String) (y String)) Bool
   (or (and (= x "") (= y ""))
       (and (not (= x "")) (not (= y ""))
           (= (char.code (str.head y))
               (ite (and (<= 65 (char.code (str.head x)))
                       (<= (char.code (str.head x)) 90))
                   (+ (char.code (str.head x)) 32)
                   (char.code (str.head x))))
           (toLower (str.tail x) (str.tail y))))
)
(declare-fun sym175 () String)
(assert (<= (str.len sym175) 11))
(declare-fun sym113 () String)
(assert (<= (str.len sym113) 11))
(declare-fun sym135 () String)
(assert (<= (str.len sym135) 11))
(declare-fun sym20 () String)
(assert (<= (str.len sym20) 11))
(declare-fun sym160 () String)
(assert (<= (str.len sym160) 11))
(declare-fun sym150 () String)
(assert (<= (str.len sym150) 11))
(declare-fun sym195 () String)
(assert (<= (str.len sym195) 11))
(declare-fun sym185 () String)
(assert (<= (str.len sym185) 11))
(declare-fun L12  () String)
(declare-fun L14  () String)
(declare-fun L7  () String)
(declare-fun L8  () String)
(declare-fun L5  () String)
(declare-fun L10  () String)
(declare-fun L6  () String)
(declare-fun L11  () String)
(declare-fun L4  () String)
(declare-fun L1  () String)
(declare-fun L2  () String)
(declare-fun L0  () String)
(define-fun Alphabet () RegLan 
	(re.* (re.union (str.to_re "A") (str.to_re "B") (str.to_re "C") (str.to_re "D") (str.to_re "E") (str.to_re "F") (str.to_re "G") (str.to_re "H") (str.to_re "I") (str.to_re "J") (str.to_re "K") (str.to_re "L") (str.to_re "M") (str.to_re "N") (str.to_re "O") (str.to_re "P") (str.to_re "Q") (str.to_re "R") (str.to_re "S") (str.to_re "T") (str.to_re "U") (str.to_re "V") (str.to_re "W") (str.to_re "X") (str.to_re "Y") (str.to_re "Z") (str.to_re "a") (str.to_re "b") (str.to_re "c") (str.to_re "d") (str.to_re "e") (str.to_re "f") (str.to_re "g") (str.to_re "h") (str.to_re "i") (str.to_re "j") (str.to_re "k") (str.to_re "l") (str.to_re "m") (str.to_re "n") (str.to_re "o") (str.to_re "p") (str.to_re "q") (str.to_re "r") (str.to_re "s") (str.to_re "t") (str.to_re "u") (str.to_re "v") (str.to_re "w") (str.to_re "x") (str.to_re "y") (str.to_re "z") ))
)
(assert (toLower sym185  L0 ))
(assert (toLower sym160  L2 ))
(assert (toLower "description"  L1 ))
(assert (toLower sym113  L4 ))
(assert (toLower "table"  L11 ))
(assert (toLower sym135  L6 ))
(assert (toLower sym195  L10 ))
(assert (toLower "database"  L5 ))
(assert (toLower sym150  L8 ))
(assert (toLower "name"  L7 ))
(assert (toLower sym175  L14 ))
(assert (toLower sym20  L12 ))

(assert (str.in_re sym185 Alphabet))
(assert (str.in_re sym195 Alphabet))
(assert (str.in_re sym150 Alphabet))
(assert (str.in_re sym160 Alphabet))
(assert (str.in_re sym20 Alphabet))
(assert (str.in_re sym135 Alphabet))
(assert (str.in_re sym113 Alphabet))
(assert (str.in_re sym175 Alphabet))
(assert (not (= L0 L1 )))
(assert (= L2 L1 ))
(assert (= L4 L5 ))
(assert (= L6 L7 ))
(assert (not (= L8 L7 )))
(assert (not (= L10 L11 )))
(assert (= L12 "html" ))
(assert (not (= L12 "sql" )))
(assert (not (= L14 L7 )))
(check-sat)
(get-model)
(exit)
