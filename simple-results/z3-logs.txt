concat_isEmpty_equals_contains_l2_d2_bench.smt2: sat ,(   (define-fun Alphabet () RegLan     (re.* (re.union (re.union (str.to_re "A") (str.to_re "B")) (str.to_re "C"))))   (define-fun sym6 () String     "BC")   (define-fun sym7 () String     "B")   (define-fun sym8 () String     "")   (define-fun sym5 () String     "B")   (define-fun sym4 () String     "BA") ) 
delete_concat_isEmpty_equals_contains_l3_d3_bench.smt2: unsat ,(error "line 112 column 10: model is not available") 
delete_isEmpty_equals_contains_l2_d2_bench.smt2: unsat ,(error "line 60 column 10: model is not available") 
replace_concat_isEmpty_equals_contains_l3_d3_bench.smt2: unknown ,(error "line 89 column 10: model is not available") 
replace_delete_concat_isEmpty_equals_contains_l3_d3_bench.smt2: unknown ,(error "line 142 column 10: model is not available") 
replace_isEmpty_equals_contains_l2_d2_bench.smt2: unknown ,(error "line 49 column 10: model is not available") 
replace_toLowerCase_delete_substring12_concat_isEmpty_equals_contains_l3_d3_bench.smt2: unknown ,(error "line 227 column 10: model is not available") 
substring12_concat_isEmpty_equals_contains_l3_d2_bench.smt2: sat ,(   (define-fun Alphabet () RegLan     (re.* (re.union (re.union (str.to_re "A") (str.to_re "B")) (str.to_re "C"))))   (define-fun sym6 () String     "CCC")   (define-fun sym7 () String     "BCA")   (define-fun sym8 () String     "CBC")   (define-fun sym5 () String     "AC")   (define-fun sym4 () String     "ACC") ) 
substring12_concat_isEmpty_equals_contains_l3_d3_bench.smt2: ,
substring12_isEmpty_equals_contains_l2_d2_bench.smt2: ,
toLowerCase_concat_isEmpty_equals_contains_l3_d3_bench.smt2: ,
toLowerCase_isEmpty_equals_contains_l2_d2_bench.smt2: unknown ,(error "line 59 column 10: model is not available") 
toLowerCase_substring12_concat_isEmpty_equals_contains_l3_d2_bench.smt2: ,
