(set-logic QF_S)
(set-option :parse-transducers true)
(set-option :produce-models true)
(define-fun-rec toLower ((x String) (y String)) Bool
   (or (and (= x "") (= y ""))
       (and (not (= x "")) (not (= y ""))
           (= (char.code (str.head y))
               (ite (and (<= 65 (char.code (str.head x)))
                       (<= (char.code (str.head x)) 90))
                   (+ (char.code (str.head x)) 32)
                   (char.code (str.head x))))
           (toLower (str.tail x) (str.tail y))))
)
(declare-fun sym1679 () String)
(declare-fun sym2080 () String)
(declare-fun sym1249 () String)
(declare-fun sym1895 () String)
(declare-fun sym1464 () String)
(declare-fun sym1033 () String)
(declare-fun sym205 () String)
(declare-fun sym547 () String)
(declare-fun sym812 () String)
(declare-fun sym161 () String)
(declare-fun L8  () String)
(declare-fun L6  () String)
(declare-fun L11  () String)
(declare-fun L33  () String)
(declare-fun L4  () String)
(declare-fun L1  () String)
(declare-fun L2  () String)
(declare-fun L0  () String)
(declare-fun L29  () String)
(define-fun Alphabet () RegLan 
	(re.* (re.union (str.to_re "A") (str.to_re "B") (str.to_re "C") (str.to_re "D") (str.to_re "E") (str.to_re "F") (str.to_re "G") (str.to_re "H") (str.to_re "I") (str.to_re "J") (str.to_re "K") (str.to_re "L") (str.to_re "M") (str.to_re "N") (str.to_re "O") (str.to_re "P") (str.to_re "Q") (str.to_re "R") (str.to_re "S") (str.to_re "T") (str.to_re "U") (str.to_re "V") (str.to_re "W") (str.to_re "X") (str.to_re "Y") (str.to_re "Z") (str.to_re "a") (str.to_re "b") (str.to_re "c") (str.to_re "d") (str.to_re "e") (str.to_re "f") (str.to_re "g") (str.to_re "h") (str.to_re "i") (str.to_re "j") (str.to_re "k") (str.to_re "l") (str.to_re "m") (str.to_re "n") (str.to_re "o") (str.to_re "p") (str.to_re "q") (str.to_re "r") (str.to_re "s") (str.to_re "t") (str.to_re "u") (str.to_re "v") (str.to_re "w") (str.to_re "x") (str.to_re "y") (str.to_re "z") ))
)
(assert (toLower (str.substr sym1464  0 1) L29 ))
(assert (toLower (str.substr sym812  0 1) L0 ))
(assert (toLower (str.substr sym1033  0 1) L2 ))
(assert (toLower (str.substr sym1679  0 1) L1 ))
(assert (toLower (str.substr sym1249  0 1) L4 ))
(assert (toLower (str.substr sym205  0 1) L33 ))
(assert (toLower (str.substr sym2080  0 1) L11 ))
(assert (toLower (str.substr sym1895  0 1) L6 ))
(assert (toLower (str.substr sym547  0 1) L8 ))

(assert (str.in_re sym161 Alphabet))
(assert (str.in_re sym812 Alphabet))
(assert (str.in_re sym547 Alphabet))
(assert (str.in_re sym205 Alphabet))
(assert (str.in_re sym1033 Alphabet))
(assert (str.in_re sym1464 Alphabet))
(assert (str.in_re sym1895 Alphabet))
(assert (str.in_re sym1249 Alphabet))
(assert (str.in_re sym2080 Alphabet))
(assert (str.in_re sym1679 Alphabet))
(assert (not (= L0 "r" )))
(assert (not (= "" sym547 )))
(assert (not (= L1 "r" )))
(assert (not (= "" sym2080 )))
(assert (= L2 "g" ))
(assert (= L0 "h" ))
(assert (= L4 "h" ))
(assert (not (= L2 "k" )))
(assert (= L6 "h" ))
(assert (= "y" "y" ))
(assert (not (= "" sym161 )))
(assert (not (= L6 "l" )))
(assert (not (= L8 "q" )))
(assert (not (= L2 "p" )))
(assert (not (= L4 "r" )))
(assert (not (= "" sym1895 )))
(assert (= "" "" ))
(assert (not (= L11 "r" )))
(assert (not (= L6 "q" )))
(assert (not (= L6 "k" )))
(assert (not (= "" sym812 )))
(assert (not (= L4 "q" )))
(assert (not (= L4 "p" )))
(assert (not (= L11 "p" )))
(assert (not (= L6 "p" )))
(assert (not (= L1 "q" )))
(assert (not (= "y" "n" )))
(assert (not (= L0 "k" )))
(assert (not (= L1 "g" )))
(assert (not (= L4 "k" )))
(assert (not (= L11 "g" )))
(assert (not (= "" "y" )))
(assert (not (= L8 "k" )))
(assert (not (= "" sym1033 )))
(assert (not (= "" "y" )))
(assert (not (= L11 "k" )))
(assert (not (= "" "q" )))
(assert (not (= "" sym205 )))
(assert (not (= L11 "l" )))
(assert (not (= L4 "g" )))
(assert (not (= L1 "p" )))
(assert (not (= L6 "r" )))
(assert (not (= L29 "g" )))
(assert (not (= "" sym1249 )))
(assert (not (= L4 "l" )))
(assert (= L29 "h" ))
(assert (not (= L8 "p" )))
(assert (not (= "" sym1679 )))
(assert (= L33 "y" ))
(assert (not (= L0 "q" )))
(assert (not (= L1 "k" )))
(assert (not (= L29 "l" )))
(assert (not (= L6 "g" )))
(assert (not (= L29 "q" )))
(assert (not (= "" sym1464 )))
(assert (= L1 "h" ))
(assert (not (= L29 "r" )))
(assert (not (= L11 "q" )))
(assert (= L11 "h" ))
(assert (not (= L29 "k" )))
(assert (not (= L0 "p" )))
(assert (not (= "" L33 )))
(assert (not (= L1 "l" )))
(assert (= L8 "g" ))
(assert (not (= L29 "p" )))
(assert (not (= L0 "l" )))
(assert (not (= L2 "q" )))
(assert (not (= L0 "g" )))
(check-sat)
(get-model)
(exit)
