(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Joel Day, Thorsten Ehlers, Mitja Kulczynski, Federico Mora, Florin Manea, Dirk Nowotka, Danny Poulsen, Zhengyang Lu
Application: Test WOORPJE
Target solver: WOORPJE
Publications: Day, J. D., Ehlers, T., Kulczynski, M., Manea, F., Nowotka, D., & Poulsen, D. B. (2019). On solving word equations using SAT. In RP 2019
Description: Consisting of a system of 100 small random word equations with at most 6 letters, 10 variables and length 60.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun B () String)
(declare-fun A () String)
(declare-fun D () String)
(assert (= (str.++  "bddbc" A "bbecae")  (str.++  "bdd" D "bbecae") ))
(assert (= (str.++  "adec" B "dcface" B "b" B)  (str.++  "adec" B D "fbdf") ))
(assert (= (str.++  "beecfcbb" B "aeeccba")  (str.++  "beecfcbbdfaeeccba" "") ))
(assert (= (str.++  "cdedcbabfdfacfeff" "")  (str.++  "cdedcbabfdfa" A "eff") ))
(assert (= (str.++  "dfdefcaeafffbe" A "d")  (str.++  "dfdefcaeafffbecfd" "") ))
(assert (= (str.++  "bebcdeceeeab" B "efc")  (str.++  "bebcdeceeeab" B "efc") ))
(assert (= (str.++  "bcfeadcaaebfebb" A)  (str.++  "b" A "eadcaaebfebbcf") ))
(assert (= (str.++  "caceeebbbcbaeccfd" "")  (str.++  "caceeebbbcbaec" A "d") ))
(assert (= (str.++  "dfbbbeabdeac" A "ceb")  (str.++  B "bbbeabdeaccfceb" "") ))
(assert (= (str.++  "dbeeaafdfccebaeda" "")  (str.++  "dbeeaaf" B "ccebaeda") ))
(assert (= (str.++  "daeadfccbcafabd" A)  (str.++  "daea" B "ccbcafabdcf") ))
(assert (= (str.++  "baabbecacdfbcdc" B)  (str.++  "baabbecac" B "bcdc" B) ))
(assert (= (str.++  "bfeedaeeda" A "bcfaa")  (str.++  "bfeedaeeda" A "b" A "aa") ))
(assert (= (str.++  "cfbaecaefecc" A "bff")  (str.++  A "baecaefecccfbff" "") ))
(assert (= (str.++  "fd" A "ddebfdafdcbbf")  (str.++  "fd" A "ddebfdafdcbbf") ))
(assert (= (str.++  B "eceedcccbccbadc" "")  (str.++  "dfeceedcccbccbadc" "") ))
(assert (= (str.++  A "acecbcdfcfcafff" "")  (str.++  A "acecbcdfcfcafff" "") ))
(assert (= (str.++  "dafafbddfedbcfefd" "")  (str.++  "dafafbd" B "edb" A "efd") ))
(assert (= (str.++  "cdad" A "afacbffceec")  (str.++  "cdadcfafacbffceec" "") ))
(assert (= (str.++  "da" B "afbdeeccefcec")  (str.++  "dadfafbdeeccefcec" "") ))
(assert (= (str.++  "dabce" A "eafc" A "bbec")  (str.++  "dabcecfeafccfbbec" "") ))
(assert (= (str.++  "bdeeceaddcdfabcde" "")  (str.++  "bdeeceaddc" B "abcde") ))
(assert (= (str.++  "efeadcfaeaebdaadb" "")  (str.++  "efead" A "aeaebdaadb") ))
(assert (= (str.++  "deacfbfeeae" A "fbcd")  (str.++  "deacfbfeeae" A "fbcd") ))
(assert (= (str.++  "ccdbafeffbcebddcf" "")  (str.++  "ccdbafeffbcebdd" A) ))
(assert (= (str.++  "aeff" B "eacebabbabd")  (str.++  "aeffdfeacebabbabd" "") ))
(assert (= (str.++  "fbedbeabaacfcfebc" "")  (str.++  "fbedbeabaa" A "cfebc") ))
(assert (= (str.++  "edefddfeeffffecee" "")  (str.++  "edefd" B "eeffffecee") ))
(assert (= (str.++  "ecefaaedbacbc" A "cd")  (str.++  "ecefaaedbacbc" A "cd") ))
(assert (= (str.++  "eae" A "fcbbabaacbdd")  (str.++  "eae" A "fcbbabaacbdd") ))
(assert (= (str.++  "defaed" B "addebafea")  (str.++  "defaed" B "addebafea") ))
(assert (= (str.++  "faab" A "cdafdccecae")  (str.++  "faab" A "cdafdccecae") ))
(assert (= (str.++  "cafe" B "ececeddaafe")  (str.++  "cafedfececeddaafe" "") ))
(assert (= (str.++  "deceaefcbcccfdecc" "")  (str.++  "deceaefcbcc" A "decc") ))
(assert (= (str.++  "cabbcdac" A "acefacb")  (str.++  "cabbcdaccfacefacb" "") ))
(assert (= (str.++  "facceddfcc" B "bfada")  (str.++  "facced" B "ccdfbfada") ))
(assert (= (str.++  "dcdffcafccfacceca" "")  (str.++  "dc" B "fcafccfacceca") ))
(assert (= (str.++  "eaccebf" A "bdbdcaed")  (str.++  "eaccebfcfbdbdcaed" "") ))
(assert (= (str.++  "ea" B "dfcacbaadaaba")  (str.++  "eadf" B "cacbaadaaba") ))
(assert (= (str.++  "edbcbceaedaec" B "cb")  (str.++  "edbcbceaedaecdfcb" "") ))
(assert (= (str.++  "deaea" B "bcefcebcef")  (str.++  "deaeadfbcefcebcef" "") ))
(assert (= (str.++  B "accccceeeba" B "ca")  (str.++  "dfaccccceeeba" B "ca") ))
(assert (= (str.++  "cfdbdccffecdafccf" "")  (str.++  A "dbdccffecdafc" A) ))
(assert (= (str.++  "cfaeabdc" A "cefcbae")  (str.++  "cfaeabdc" A "cefcbae") ))
(assert (= (str.++  "bcddfdcaca" A "ccdfa")  (str.++  "bcd" B "dcacacfcc" B "a") ))
(assert (= (str.++  B "aaef" B "caeebc" A "f")  (str.++  B "aaefdfcaeebccff" "") ))
(assert (= (str.++  "efcdffcafa" B "cdaea")  (str.++  "efcdffcafadfcdaea" "") ))
(assert (= (str.++  "edabebfbdedcfdceb" "")  (str.++  "edabebfbded" A "dceb") ))
(assert (= (str.++  "befccbfbdacbba" B "c")  (str.++  "befccbfbdacbbadfc" "") ))
(assert (= (str.++  "cbeefbeecbceefe" B)  (str.++  "cbeefbeecbceefe" B) ))
(check-sat)

(exit)
