(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Joel Day, Thorsten Ehlers, Mitja Kulczynski, Federico Mora, Florin Manea, Dirk Nowotka, Danny Poulsen, Zhengyang Lu
Application: Test WOORPJE
Target solver: WOORPJE
Publications: Day, J. D., Ehlers, T., Kulczynski, M., Manea, F., Nowotka, D., & Poulsen, D. B. (2019). On solving word equations using SAT. In RP 2019
Description: Consisting of a system of 100 small random word equations with at most 6 letters, 10 variables and length 60.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun B () String)
(declare-fun A () String)
(assert (= (str.++  A "daaa" A "aedb" B "ccbea")  (str.++  B B "aaa" A "ae" B "b" B "ccbea") ))
(assert (= (str.++  "baeaaaceadabcede" "")  (str.++  "baeaaaceadabce" B "e") ))
(assert (= (str.++  "c" A "aeeeabbebcbdac")  (str.++  "c" A "aeeeabbebcb" A "ac") ))
(assert (= (str.++  "cdedbbada" A B "e" B "bb" A)  (str.++  "c" A "edbba" B "adde" A "bb" A) ))
(assert (= (str.++  "ecbabbcaeb" B "eecba")  (str.++  "ecbabbcaebdeecba" "") ))
(assert (= (str.++  "aecad" A "eaeeeea" A "be")  (str.++  "aeca" A A "eaeeeeadbe") ))
(assert (= (str.++  "aceca" A "bc" A "ebeeebb")  (str.++  "acecadbc" A "ebeeebb") ))
(assert (= (str.++  A "abbeeebbbaaaeac" "")  (str.++  A "abbeeebbbaaaeac" "") ))
(assert (= (str.++  "decac" B "aaeebac" B "ad")  (str.++  B "ecacdaaeebacda" B) ))
(assert (= (str.++  "ceceeec" A "c" A "ac" B "eec")  (str.++  "ceceeec" A "cdac" A "eec") ))
(assert (= (str.++  A "dcaaac" A "beacd" A "ec")  (str.++  A "dcaaacdbeac" B B "ec") ))
(assert (= (str.++  "ecb" B A "bbe" B "cabbbba")  (str.++  "ecbddbbedcabbbba" "") ))
(assert (= (str.++  "c" B "bbea" A "b" A "b" A "bdcea")  (str.++  "c" B "bbea" B "b" A "bdb" A "cea") ))
(assert (= (str.++  A "a" A "eedceee" A "bba" B "e")  (str.++  B "a" A "ee" A "ceee" A "bba" A "e") ))
(assert (= (str.++  "eebea" A "ece" B B "ebac" A)  (str.++  "eebea" A "ece" A "debacd") ))
(assert (= (str.++  "eebea" A "aaebcaebeb")  (str.++  "eebea" B "aaebcaebeb") ))
(assert (= (str.++  "ee" A "aee" B "bcb" A A A "aee")  (str.++  "ee" A "aee" B "bcb" A A A "aee") ))
(assert (= (str.++  "da" B "addeb" A "bee" A "cac")  (str.++  B "a" B "a" A "deb" A "beedcac") ))
(assert (= (str.++  "a" B "acbdbc" A "e" A "aeecb")  (str.++  "a" A "acb" A "bcde" B "aeecb") ))
(assert (= (str.++  "ea" A "be" A "ececea" B "aaa")  (str.++  "ea" A "be" A "ececeadaaa") ))
(assert (= (str.++  "ccbccaddb" A "b" A "bc" A "c")  (str.++  "ccbcca" A B "b" A "b" A "bcdc") ))
(assert (= (str.++  "aee" A "adecaecdaebe")  (str.++  "aeeda" A "ecaecdaebe") ))
(assert (= (str.++  "a" A "ecccabb" A "cec" A "ae")  (str.++  "a" A "ecccabb" A "cec" A "ae") ))
(assert (= (str.++  "eceeceeac" A "ce" A "cac")  (str.++  "eceeceeac" A "ce" B "cac") ))
(assert (= (str.++  "bcecbcccce" B "acbc" B)  (str.++  "bcecbcccce" B "acbcd") ))
(assert (= (str.++  "bbaaecc" B "ddbbebaa")  (str.++  "bbaaecc" A B "dbbebaa") ))
(assert (= (str.++  B "bbbebae" B "cabaadb")  (str.++  "dbbbebae" A "cabaadb") ))
(assert (= (str.++  "c" A "ececeacbaaeebc")  (str.++  "c" A "ececeacbaaeebc") ))
(assert (= (str.++  "abeace" B "bbceeab" B "a")  (str.++  "abeace" B "bbceeab" B "a") ))
(assert (= (str.++  "aeeecaaeaac" A "ccbc")  (str.++  "aeeecaaeaac" B "ccbc") ))
(assert (= (str.++  "ebacce" A "bacecbeca")  (str.++  "ebacce" A "bacecbeca") ))
(assert (= (str.++  "b" A B "aa" A A "c" A "be" A "aeeb")  (str.++  "bddaa" A A "c" A "be" A "aeeb") ))
(assert (= (str.++  "dcecdbbccbeb" A "ca" A)  (str.++  A "cec" B "bbccbebdcad") ))
(assert (= (str.++  "bdbeb" A "aee" A "bad" A "ac")  (str.++  "bdbebdaee" A "ba" B A "ac") ))
(assert (= (str.++  "ebaae" A A B "ebacc" B "ea")  (str.++  "ebaaed" B A "ebacc" B "ea") ))
(assert (= (str.++  "ab" A "d" A "dbeec" A "cb" B "aa")  (str.++  "ab" A B "d" A "beec" B "cb" A "aa") ))
(assert (= (str.++  B "acaebacabbc" B "e" A A)  (str.++  "dacaebacabbc" A "e" A A) ))
(assert (= (str.++  "eee" A "e" A "debaeaacdc")  (str.++  "eee" A "ed" B "ebaeaac" A "c") ))
(assert (= (str.++  "c" B B "bececa" A "abbeab")  (str.++  "c" A A "bececa" A "abbeab") ))
(assert (= (str.++  A "ecbea" A "abe" B A "abab")  (str.++  A "ecbeadabe" B "dabab") ))
(assert (= (str.++  B A "eaceeeabab" A "ddb")  (str.++  A A "eaceeeabab" A B B "b") ))
(assert (= (str.++  "b" A "ace" A B A "eec" B "badc")  (str.++  "bdaced" A A "eec" B "ba" B "c") ))
(assert (= (str.++  "bbaaaeb" B "abbcbaad")  (str.++  "bbaaaeb" B "abbcbaad") ))
(assert (= (str.++  "baacaace" B "cbccec" A)  (str.++  "baacaacedcbccec" A) ))
(assert (= (str.++  A "ce" A "a" A "cceabcbedc")  (str.++  "dce" A "adcceabcbe" A "c") ))
(assert (= (str.++  "ccabbceeaee" A "ebda")  (str.++  "ccabbceeaee" B "eb" A "a") ))
(assert (= (str.++  "ceb" A "eeead" A "aaea" A "b")  (str.++  "ceb" A "eeea" A "daaea" A "b") ))
(assert (= (str.++  B "ceeb" B "bbcc" A A "ebea")  (str.++  A "ceeb" A "bbcc" A A "ebea") ))
(assert (= (str.++  "dccc" A "bb" A "e" A "babbac")  (str.++  B "cccdbbde" A "babbac") ))
(assert (= (str.++  "caeacecabebe" B "caa")  (str.++  "caeacecabebe" B "caa") ))
(assert (= (str.++  "aeaeecbb" A "bbabbbe")  (str.++  "aeaeecbbdbbabbbe" "") ))
(check-sat)

(exit)
