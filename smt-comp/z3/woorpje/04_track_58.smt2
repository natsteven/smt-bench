(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Joel Day, Thorsten Ehlers, Mitja Kulczynski, Federico Mora, Florin Manea, Dirk Nowotka, Danny Poulsen, Zhengyang Lu
Application: Test WOORPJE
Target solver: WOORPJE
Publications: Day, J. D., Ehlers, T., Kulczynski, M., Manea, F., Nowotka, D., & Poulsen, D. B. (2019). On solving word equations using SAT. In RP 2019
Description: Consisting of a system of 100 small random word equations with at most 6 letters, 10 variables and length 60.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun B () String)
(declare-fun E () String)
(declare-fun A () String)
(declare-fun C () String)
(declare-fun D () String)
(assert (= (str.++  "a" D "b")  (str.++  "a" A E A "b") ))
(assert (= (str.++  "acbd" A A)  (str.++  "acbdcc" "") ))
(assert (= (str.++  "ddabac" "")  (str.++  "ddaba" A) ))
(assert (= (str.++  "c" C "db")  (str.++  A A E "db") ))
(assert (= (str.++  "bbbada" "")  (str.++  E "bada" "") ))
(assert (= (str.++  "b" A "a" C)  (str.++  "bcac" E) ))
(assert (= (str.++  "aacdaa" "")  (str.++  "aa" A "daa") ))
(assert (= (str.++  "acdcad" "")  (str.++  "a" A "dcad") ))
(assert (= (str.++  "b" A "bdb" A)  (str.++  "bcbdb" A) ))
(assert (= (str.++  "bc" A "aad")  (str.++  "b" A "caad") ))
(assert (= (str.++  "d" A "baba")  (str.++  "dcbaba" "") ))
(assert (= (str.++  "bdba" A "a")  (str.++  "bdba" A "a") ))
(assert (= (str.++  "d" A "cd" A "b")  (str.++  "d" A "cd" A "b") ))
(assert (= (str.++  "bdc" A "ad")  (str.++  "bdccad" "") ))
(assert (= (str.++  "ba" A "dd" A)  (str.++  "ba" A "dd" A) ))
(assert (= (str.++  "aabc" A "c")  (str.++  "aabc" A A) ))
(assert (= (str.++  A "abbda" "")  (str.++  A "a" E "da") ))
(assert (= (str.++  A "acc" A "a")  (str.++  "cac" A "ca") ))
(assert (= (str.++  "cdcdbd" "")  (str.++  A "dcdbd" "") ))
(assert (= (str.++  "bbdadb" "")  (str.++  E "dadb" "") ))
(assert (= (str.++  A "cba" A A)  (str.++  A "cbacc" "") ))
(assert (= (str.++  "bacaa" A)  (str.++  "ba" A "aa" A) ))
(assert (= (str.++  A "bbada" "")  (str.++  A "bbada" "") ))
(assert (= (str.++  "dbc" A E)  (str.++  "dbcc" E) ))
(assert (= (str.++  "cdb" A "bd")  (str.++  A "db" A "bd") ))
(assert (= (str.++  "cbc" A "bd")  (str.++  "cbc" A "bd") ))
(assert (= (str.++  A "ddddc" "")  (str.++  A "ddddc" "") ))
(assert (= (str.++  "dcbabc" "")  (str.++  "d" A "babc") ))
(assert (= (str.++  "dcbbba" "")  (str.++  "d" A E "ba") ))
(assert (= (str.++  "dab" B)  (str.++  "dab" B) ))
(assert (= (str.++  "cabbda" "")  (str.++  A "abbda" "") ))
(assert (= (str.++  "b" A B "a")  (str.++  "b" A E A "a") ))
(assert (= (str.++  "cdbbdd" "")  (str.++  A "dbbdd" "") ))
(assert (= (str.++  "aa" A "bda")  (str.++  "aacbda" "") ))
(assert (= (str.++  "dba" A "bd")  (str.++  "dbacbd" "") ))
(assert (= (str.++  "dad" A "aa")  (str.++  "dadcaa" "") ))
(assert (= (str.++  "a" A "bdcd")  (str.++  "a" A "bdcd") ))
(assert (= (str.++  "dd" A "bc" A)  (str.++  "dd" A "bc" A) ))
(assert (= (str.++  "ad" A "a" A "d")  (str.++  "ad" A "a" A "d") ))
(assert (= (str.++  A "da" B)  (str.++  A "da" E "c") ))
(assert (= (str.++  "cdb" A "a" A)  (str.++  A "dbcac" "") ))
(assert (= (str.++  "cdbbaa" "")  (str.++  A "dbbaa" "") ))
(assert (= (str.++  "daaba" A)  (str.++  "daabac" "") ))
(assert (= (str.++  "b" B "cd")  (str.++  E "bccd" "") ))
(assert (= (str.++  "d" A A "aac")  (str.++  "d" A A "aac") ))
(assert (= (str.++  "aadcdb" "")  (str.++  "aad" A "db") ))
(assert (= (str.++  "bd" E "dd")  (str.++  "bd" E "dd") ))
(assert (= (str.++  "a" E A E)  (str.++  "a" E C) ))
(assert (= (str.++  A "bc" A "ad")  (str.++  "cbc" A "ad") ))
(assert (= (str.++  "dbcdbd" "")  (str.++  "db" A "dbd") ))
(assert (= (str.++  "cacdcd" "")  (str.++  "ca" A "dcd") ))
(assert (= (str.++  "cb" A A "da")  (str.++  "cbc" A "da") ))
(assert (= (str.++  "ba" A "b" A "b")  (str.++  "bacb" A "b") ))
(assert (= (str.++  "dd" A "cda")  (str.++  "ddccda" "") ))
(assert (= (str.++  "abbbab" "")  (str.++  "a" E "bab") ))
(assert (= (str.++  "a" A A "acc")  (str.++  "a" A "cacc") ))
(assert (= (str.++  "aacd" A A)  (str.++  "aacdc" A) ))
(assert (= (str.++  "cbc" A "da")  (str.++  A "bccda" "") ))
(assert (= (str.++  C "aa" A)  (str.++  A "bbaa" A) ))
(assert (= (str.++  A "b" A "bda")  (str.++  A "b" A "bda") ))
(assert (= (str.++  "b" A "dadd")  (str.++  "b" A "dadd") ))
(assert (= (str.++  "a" A "bdda")  (str.++  "acbdda" "") ))
(assert (= (str.++  A "dab" A "b")  (str.++  A "dab" A "b") ))
(assert (= (str.++  "aa" A "d" A "a")  (str.++  "aa" A "dca") ))
(assert (= (str.++  "bcbbdb" "")  (str.++  "bc" E "db") ))
(assert (= (str.++  "ddba" A "a")  (str.++  "ddbaca" "") ))
(assert (= (str.++  "ddbaa" A)  (str.++  "ddbaa" A) ))
(assert (= (str.++  "ddbba" A)  (str.++  "dd" E "a" A) ))
(assert (= (str.++  "ad" E "ba")  (str.++  "ad" E "ba") ))
(assert (= (str.++  "aaaaa" A)  (str.++  "aaaaac" "") ))
(assert (= (str.++  A "aaa" A "b")  (str.++  "caaa" A "b") ))
(assert (= (str.++  "acba" A "a")  (str.++  "a" A "ba" A "a") ))
(assert (= (str.++  A "caabd" "")  (str.++  A "caabd" "") ))
(assert (= (str.++  "ca" A "da" A)  (str.++  A "acda" A) ))
(assert (= (str.++  "ada" A "ba")  (str.++  "ada" A "ba") ))
(assert (= (str.++  E E "ba")  (str.++  E E "ba") ))
(assert (= (str.++  "cddc" A "a")  (str.++  "cddc" A "a") ))
(assert (= (str.++  "c" A "bdab")  (str.++  "ccbdab" "") ))
(assert (= (str.++  "dbc" A "bc")  (str.++  "db" A "cbc") ))
(assert (= (str.++  "a" A "d" A "ad")  (str.++  "a" A "d" A "ad") ))
(assert (= (str.++  "aab" A "bb")  (str.++  "aab" A "bb") ))
(assert (= (str.++  "bbdaab" "")  (str.++  E "daab" "") ))
(assert (= (str.++  "d" A "dcdb")  (str.++  "dcdcdb" "") ))
(assert (= (str.++  "aacdbb" "")  (str.++  "aa" A "dbb") ))
(assert (= (str.++  A "d" A "aaa")  (str.++  "cdcaaa" "") ))
(assert (= (str.++  "bdccab" "")  (str.++  "bdc" A "ab") ))
(assert (= (str.++  "adab" A "a")  (str.++  "adab" A "a") ))
(assert (= (str.++  A E "aaa")  (str.++  A E "aaa") ))
(assert (= (str.++  "b" A "ddcd")  (str.++  "bcdd" A "d") ))
(assert (= (str.++  A "abbcc" "")  (str.++  "ca" B "c") ))
(assert (= (str.++  A "c" A "ac" A)  (str.++  A "cca" A A) ))
(assert (= (str.++  "cbbadc" "")  (str.++  "cbbad" A) ))
(assert (= (str.++  "daccb" A)  (str.++  "da" A A "b" A) ))
(check-sat)

(exit)
