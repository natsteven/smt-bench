(set-logic QF_S)
(set-option :parse-transducers true)
(set-option :produce-models true)
(define-fun-rec toLower ((x String) (y String)) Bool
   (or (and (= x "") (= y ""))
       (and (not (= x "")) (not (= y ""))
           (= (char.code (str.head y))
               (ite (and (<= 65 (char.code (str.head x)))
                       (<= (char.code (str.head x)) 90))
                   (+ (char.code (str.head x)) 32)
                   (char.code (str.head x))))
           (toLower (str.tail x) (str.tail y))))
)
(define-fun str.del ((x String) (a Int) (b Int)) String
  (str.++ (str.substr x 0 a) (str.substr x b (str.len x))))
(declare-fun sym9 () String)
(declare-fun sym7 () String)
(declare-fun sym8 () String)
(declare-fun sym11 () String)
(declare-fun sym10 () String)
(declare-fun L16  () String)
(declare-fun L49  () String)
(declare-fun L34  () String)
(declare-fun L13  () String)
(declare-fun L47  () String)
(declare-fun L15  () String)
(declare-fun L37  () String)
(declare-fun L7  () String)
(declare-fun L30  () String)
(declare-fun L52  () String)
(declare-fun L8  () String)
(declare-fun L53  () String)
(declare-fun L5  () String)
(declare-fun L11  () String)
(declare-fun L55  () String)
(declare-fun L3  () String)
(declare-fun L4  () String)
(declare-fun L1  () String)
(declare-fun L2  () String)
(declare-fun L0  () String)
(define-fun Alphabet () RegLan 
	(re.* (re.union (str.to_re "A") (str.to_re "B") (str.to_re "C") (str.to_re "a") (str.to_re "b") (str.to_re "c") ))
)
(assert (toLower (str.++ L1 "c" ) L0 ))
(assert (toLower sym9  L2 ))
(assert (toLower sym10  L1 ))
(assert (toLower L5  L4 ))
(assert (toLower sym11  L3 ))
(assert (toLower sym8  L55 ))
(assert (toLower L3  L11 ))
(assert (toLower sym7  L5 ))
(assert (toLower (str.replace_all sym11  "b"  "A" ) L53 ))
(assert (toLower L4  L8 ))
(assert (toLower (str.++ sym7 "B" ) L52 ))
(assert (toLower (str.del sym9  3 3) L30 ))
(assert (toLower (str.++ sym9 sym10 ) L7 ))
(assert (toLower (str.++ sym9 "c" ) L37 ))
(assert (toLower (str.del (str.substr sym8  2 0) 0 0) L15 ))
(assert (toLower L30  L47 ))
(assert (toLower (str.++ L5 "c" ) L13 ))
(assert (toLower (str.++ (str.substr sym7  3 0)"b" ) L34 ))
(assert (toLower (str.replace_all (str.replace_all sym11  "A"  "C" ) "A"  "c" ) L49 ))
(assert (toLower (str.substr (str.replace_all sym7  "B"  "C" ) 1 0) L16 ))

(assert (str.in_re sym10 Alphabet))
(assert (str.in_re sym11 Alphabet))
(assert (str.in_re sym8 Alphabet))
(assert (str.in_re sym7 Alphabet))
(assert (str.in_re sym9 Alphabet))
(assert (not (= "" L0 )))
(assert (not (str.contains (str.replace_all sym7  "A"  "B" )"bB" )))
(assert (= "" (str.del sym10  0 3)))
(assert (= (str.substr (str.replace_all L2  "a"  "C" ) 3 0)"" ))
(assert (not (str.contains (str.replace_all L3  "a"  "A" )"aa" )))
(assert (not (= (str.substr (str.++ sym9 sym10 ) 4 0)"aa" )))
(assert (not (= "" (str.substr sym10  1 1))))
(assert (not (= "" (str.++ (str.del (str.replace_all sym7  "B"  "C" ) 1 3)L4 ))))
(assert (= "" (str.substr (str.del (str.substr sym11  1 2) 1 1) 0 0)))
(assert (= "" (str.replace_all (str.del (str.substr sym8  2 0) 0 0) "B"  "A" )))
(assert (not (str.contains (str.substr sym11  1 2)"b" )))
(assert (not (= "" (str.replace_all (str.substr (str.del sym11  1 1) 1 1) "c"  "C" ))))
(assert (not (str.contains (str.del sym8  3 3)"cb" )))
(assert (str.contains L5 "" ))
(assert (str.contains (str.substr sym10  1 1)"" ))
(assert (not (= "" L7 )))
(assert (not (= L8 "c" )))
(assert (not (= "" (str.replace_all sym11  "b"  "A" ))))
(assert (not (= (str.++ (str.del sym9  3 3)(str.replace_all sym8  "B"  "A" ))"BB" )))
(assert (not (= (str.substr (str.replace_all sym7  "B"  "C" ) 1 0)"b" )))
(assert (str.contains (str.++ L11 (str.del sym9  3 3)(str.replace_all sym8  "B"  "A" ))"" ))
(assert (not (= L13 "" )))
(assert (not (= (str.++ sym9 "c" )"bc" )))
(assert (not (= L15 "Cb" )))
(assert (not (str.contains L16 "CC" )))
(assert (not (= L2 "" )))
(assert (not (str.contains (str.replace_all L11  "b"  "B" )"Bb" )))
(assert (= "" (str.del (str.del (str.substr sym8  2 0) 0 0) 0 0)))
(assert (not (= "" L2 )))
(assert (= "" (str.substr (str.replace_all L1  "b"  "B" ) 2 0)))
(assert (not (= "" (str.++ (str.replace_all (str.del sym9  2 3) "b"  "B" )(str.replace_all sym7  "a"  "c" )"c" ))))
(assert (not (= L8 "bb" )))
(assert (not (= sym10 "" )))
(assert (not (str.contains (str.substr sym8  3 0)"B" )))
(assert (not (= (str.replace_all (str.del (str.substr sym11  1 2) 1 1) "B"  "a" )"ba" )))
(assert (not (= L1 "b" )))
(assert (str.contains (str.++ L5 "c" )"" ))
(assert (not (str.contains (str.del (str.replace_all L3  "a"  "A" ) 0 2)"B" )))
(assert (not (= "" (str.replace_all (str.del (str.replace_all sym7  "a"  "C" ) 3 3) "C"  "b" ))))
(assert (not (= "" (str.replace_all (str.++ sym10 "c" ) "a"  "B" ))))
(assert (not (= "" (str.++ (str.del (str.substr sym8  2 0) 0 0)(str.replace_all L2  "a"  "C" )))))
(assert (not (str.contains (str.replace_all (str.substr sym10  1 1) "C"  "b" )"BB" )))
(assert (not (= (str.++ L1 "c" )"" )))
(assert (str.contains (str.replace_all sym8  "B"  "A" )"" ))
(assert (= (str.del (str.substr (str.del sym10  0 3) 0 0) 0 0)"" ))
(assert (not (= "" sym9 )))
(assert (not (= (str.replace_all (str.replace_all sym11  "A"  "C" ) "A"  "c" )"b" )))
(assert (str.contains (str.del (str.substr sym11  1 2) 1 1)"" ))
(assert (not (= (str.++ sym11 sym9 )"" )))
(assert (not (str.contains (str.substr (str.++ sym10 "c" ) 2 1)"cB" )))
(assert (not (= (str.++ sym7 "B" )"A" )))
(assert (not (str.contains L30 "aC" )))
(assert (not (= "" (str.substr (str.del (str.replace_all sym7  "a"  "C" ) 3 3) 0 1))))
(assert (not (= (str.substr (str.++ sym9 sym7 ) 1 5)"c" )))
(assert (not (= (str.del (str.replace_all L2  "a"  "C" ) 3 3)"" )))
(assert (not (= L4 "" )))
(assert (not (= (str.++ (str.substr (str.replace_all sym7  "B"  "C" ) 1 0)(str.substr (str.++ sym10 "c" ) 2 1))"" )))
(assert (not (str.contains sym11 "c" )))
(assert (not (= "" L34 )))
(assert (str.contains (str.replace_all sym8  "c"  "a" )"" ))
(assert (not (= L3 "AB" )))
(assert (not (= "" (str.del L30  3 3))))
(assert (str.contains L37 "" ))
(assert (not (= "" (str.del L1  3 3))))
(assert (= "" (str.replace_all (str.substr (str.substr sym8  3 0) 0 0) "A"  "c" )))
(assert (= "" (str.substr sym10  0 0)))
(assert (not (str.contains (str.substr sym7  2 0)"B" )))
(assert (not (= (str.del (str.replace_all sym7  "B"  "C" ) 1 3)"" )))
(assert (not (= "" (str.++ (str.substr (str.replace_all sym7  "B"  "C" ) 1 0)(str.replace_all (str.++ sym9 "c" ) "a"  "A" )))))
(assert (not (= L5 "" )))
(assert (not (= (str.del (str.substr sym8  2 0) 0 0)"CC" )))
(assert (not (str.contains (str.del (str.substr sym8  0 2) 0 2)"B" )))
(assert (not (str.contains (str.replace_all (str.replace_all (str.replace_all sym11  "A"  "C" ) "A"  "c" ) "a"  "b" )"c" )))
(assert (not (str.contains (str.++ (str.substr sym7  2 0)"C" )"CC" )))
(assert (str.contains (str.del (str.substr (str.++ sym10 "c" ) 2 1) 1 1)"" ))
(assert (str.contains (str.del sym9  3 3)"" ))
(assert (not (str.contains L11 "Bb" )))
(assert (not (= "" (str.++ (str.++ sym11 sym9 )"A" ))))
(assert (str.contains (str.++ sym9 sym7 )"" ))
(assert (not (str.contains L34 "c" )))
(assert (= "" (str.substr sym8  3 0)))
(assert (not (= "" (str.++ sym10 "B" ))))
(assert (not (= "" (str.++ (str.++ sym7 "c" )(str.substr sym11  1 2)))))
(assert (str.contains (str.del sym8  0 1)"A" ))
(assert (not (str.contains (str.replace_all (str.replace_all sym7  "b"  "A" ) "c"  "b" )"a" )))
(assert (not (= "" (str.++ (str.replace_all sym7  "a"  "c" )"c" ))))
(assert (not (= "" L11 )))
(assert (not (= "" (str.replace_all L2  "a"  "C" ))))
(assert (not (= sym8 "Aa" )))
(assert (not (= (str.++ sym9 sym11 )"" )))
(assert (not (= (str.substr (str.del (str.substr sym11  1 2) 0 2) 0 0)"b" )))
(assert (not (str.contains (str.del (str.replace_all (str.substr sym10  1 1) "C"  "b" ) 1 1)"B" )))
(assert (not (= (str.replace_all sym7  "b"  "A" )"Ac" )))
(assert (not (= (str.++ L2 (str.replace_all sym7  "A"  "B" ))"" )))
(assert (str.contains (str.del (str.replace_all sym7  "B"  "C" ) 3 3)"c" ))
(assert (= "" (str.substr sym7  3 0)))
(assert (not (= "" (str.del (str.++ sym11 sym9 ) 4 4))))
(assert (not (= "" (str.replace_all sym8  "c"  "a" ))))
(assert (not (str.contains (str.replace_all (str.del sym8  3 3) "C"  "A" )"bC" )))
(assert (not (= "" (str.++ sym7 "c" ))))
(assert (str.contains (str.++ (str.++ (str.++ sym7 "c" )(str.substr sym11  1 2))"A" )"" ))
(assert (not (= "" (str.replace_all sym7  "a"  "C" ))))
(assert (not (str.contains (str.del sym9  2 3)"BA" )))
(assert (not (= L47 "b" )))
(assert (not (= (str.substr sym8  0 2)"A" )))
(assert (not (= "" L49 )))
(assert (not (str.contains (str.del (str.substr (str.++ sym9 sym10 ) 4 0) 0 0)"a" )))
(assert (not (str.contains L2 "bB" )))
(assert (not (str.contains (str.++ sym10 "b" )"C" )))
(assert (not (= (str.del sym11  1 3)"BA" )))
(assert (not (= (str.del L7  2 6)"a" )))
(assert (= "" (str.substr (str.substr sym8  3 0) 0 0)))
(assert (str.contains (str.substr (str.++ (str.replace_all sym7  "a"  "c" )"c" ) 2 0)"" ))
(assert (str.contains (str.substr (str.replace_all (str.del sym8  3 3) "C"  "A" ) 3 0)"" ))
(assert (not (= (str.++ sym10 "c" )"" )))
(assert (not (= "" L52 )))
(assert (not (= L53 "c" )))
(assert (not (= "" sym7 )))
(assert (str.contains (str.replace_all (str.replace_all (str.del sym9  2 3) "b"  "B" ) "c"  "A" )"" ))
(assert (not (= (str.substr sym8  2 0)"BC" )))
(assert (not (= (str.++ (str.del (str.substr sym8  2 0) 0 0)(str.replace_all (str.del sym8  3 3) "C"  "A" ))"" )))
(assert (not (= (str.del sym8  1 2)"B" )))
(assert (not (= (str.++ (str.substr sym7  3 0)"b" )"bc" )))
(assert (str.contains (str.replace_all sym7  "a"  "c" )"c" ))
(assert (= "" (str.replace_all (str.substr (str.del sym10  0 3) 0 0) "b"  "B" )))
(assert (not (= (str.replace_all L1  "b"  "B" )"b" )))
(assert (not (= "" L55 )))
(assert (not (= (str.substr (str.++ (str.++ sym11 sym9 )"A" ) 2 5)"" )))
(assert (= "" (str.substr (str.del sym10  0 3) 0 0)))
(assert (not (= (str.del (str.replace_all sym7  "a"  "C" ) 3 3)"" )))
(assert (= "" (str.substr (str.del sym10  0 3) 0 0)))
(assert (not (= "" L1 )))
(assert (not (= "" (str.replace_all sym7  "B"  "C" ))))
(assert (not (= "" (str.del sym11  1 1))))
(assert (not (str.contains L4 "Bb" )))
(assert (not (= "" (str.replace_all sym11  "A"  "C" ))))
(assert (not (= (str.del (str.substr sym8  2 0) 0 0)"Cc" )))
(assert (not (= L4 "aa" )))
(assert (not (= (str.del sym10  1 3)"A" )))
(assert (not (= "" (str.substr (str.del sym11  1 1) 1 1))))
(assert (str.contains (str.del (str.del (str.replace_all sym7  "B"  "C" ) 1 3) 0 1)"" ))
(assert (not (= "" (str.replace_all (str.del sym9  2 3) "b"  "B" ))))
(assert (not (str.contains (str.del (str.substr sym11  1 2) 0 2)"CA" )))
(assert (not (= "" (str.++ (str.++ sym9 sym10 )"B" ))))
(assert (not (= (str.++ (str.substr (str.del sym10  0 3) 0 0)"A" )"aC" )))
(assert (= (str.substr (str.replace_all sym8  "B"  "A" ) 1 1)"A" ))
(assert (= "" (str.substr (str.replace_all sym8  "B"  "A" ) 1 0)))
(assert (not (str.contains (str.replace_all (str.++ sym9 "c" ) "a"  "A" )"cb" )))
(assert (not (str.contains (str.substr (str.del (str.replace_all sym7  "B"  "C" ) 1 3) 0 0)"A" )))
(assert (not (= (str.++ (str.substr (str.++ sym10 "c" ) 2 1)(str.replace_all (str.++ sym10 "c" ) "a"  "B" ))"BC" )))
(assert (not (str.contains (str.substr (str.substr (str.del sym10  0 3) 0 0) 0 0)"aB" )))
(assert (not (= (str.replace_all (str.replace_all (str.replace_all sym7  "b"  "A" ) "c"  "b" ) "b"  "A" )"C" )))
(assert (not (= (str.++ sym9 sym10 )"CC" )))
(assert (not (= (str.del sym9  1 1)"Ba" )))
(assert (not (= "" L3 )))
(check-sat)
(get-model)
(exit)
