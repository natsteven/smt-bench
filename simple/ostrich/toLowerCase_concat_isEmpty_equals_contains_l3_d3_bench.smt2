(set-logic QF_S)
(set-option :parse-transducers true)
(set-option :produce-models true)
(define-fun-rec toLower ((x String) (y String)) Bool
   (or (and (= x "") (= y ""))
       (and (not (= x "")) (not (= y ""))
           (= (char.code (str.head y))
               (ite (and (<= 65 (char.code (str.head x)))
                       (<= (char.code (str.head x)) 90))
                   (+ (char.code (str.head x)) 32)
                   (char.code (str.head x))))
           (toLower (str.tail x) (str.tail y))))
)
(declare-fun sym9 () String)
(declare-fun sym7 () String)
(declare-fun sym8 () String)
(declare-fun sym5 () String)
(declare-fun sym6 () String)
(declare-fun L16  () String)
(declare-fun L38  () String)
(declare-fun L18  () String)
(declare-fun L29  () String)
(declare-fun L46  () String)
(declare-fun L14  () String)
(declare-fun L15  () String)
(declare-fun L37  () String)
(declare-fun L7  () String)
(declare-fun L52  () String)
(declare-fun L43  () String)
(declare-fun L6  () String)
(declare-fun L11  () String)
(declare-fun L3  () String)
(declare-fun L4  () String)
(declare-fun L1  () String)
(declare-fun L2  () String)
(declare-fun L40  () String)
(declare-fun L0  () String)
(define-fun Alphabet () RegLan 
	(re.* (re.union (str.to_re "A") (str.to_re "B") (str.to_re "a") (str.to_re "b") ))
)
(assert (toLower (str.++ sym5 sym7 ) L0 ))
(assert (toLower (str.++ L4 sym7 "A" ) L40 ))
(assert (toLower sym8  L2 ))
(assert (toLower (str.++ L2 sym7 sym8 ) L1 ))
(assert (toLower sym6  L4 ))
(assert (toLower (str.++ sym7 sym5 ) L3 ))
(assert (toLower L6  L11 ))
(assert (toLower sym5  L6 ))
(assert (toLower (str.++ sym8 sym6 ) L43 ))
(assert (toLower (str.++ L6 "B" ) L52 ))
(assert (toLower (str.++ sym9 sym6 ) L7 ))
(assert (toLower sym9  L37 ))
(assert (toLower (str.++ (str.++ sym9 sym6 )"b" ) L15 ))
(assert (toLower (str.++ sym9 "b" ) L14 ))
(assert (toLower (str.++ (str.++ sym7 sym5 )"a" ) L46 ))
(assert (toLower L7  L29 ))
(assert (toLower sym7  L18 ))
(assert (toLower L14  L38 ))
(assert (toLower L0  L16 ))

(assert (str.in_re sym6 Alphabet))
(assert (str.in_re sym5 Alphabet))
(assert (str.in_re sym8 Alphabet))
(assert (str.in_re sym7 Alphabet))
(assert (str.in_re sym9 Alphabet))
(assert (not (= "" L0 )))
(assert (not (= "" L1 )))
(assert (not (= "" (str.++ (str.++ (str.++ sym7 "A" )"a" )L3 ))))
(assert (not (= "" (str.++ (str.++ L4 sym7 "A" )L0 ))))
(assert (not (= (str.++ (str.++ sym7 "A" )L6 )"" )))
(assert (not (= "" sym5 )))
(assert (not (= "" L7 )))
(assert (not (= (str.++ L0 "B" )"aA" )))
(assert (not (= (str.++ sym7 sym8 )"b" )))
(assert (not (= (str.++ (str.++ sym9 sym6 )"b" )"" )))
(assert (not (= "" L2 )))
(assert (not (= "" L0 )))
(assert (not (= "" L11 )))
(assert (str.contains (str.++ L2 sym7 sym8 )"" ))
(assert (not (= "" L14 )))
(assert (not (= L15 "" )))
(assert (not (= L16 "A" )))
(assert (not (= "" L18 )))
(assert (str.contains (str.++ sym9 "b" )"b" ))
(assert (str.contains (str.++ sym7 sym5 )"aA" ))
(assert (not (= L6 "b" )))
(assert (str.contains (str.++ sym9 sym6 )"B" ))
(assert (not (= (str.++ L14 "B" )"b" )))
(assert (not (= "" (str.++ sym8 sym7 ))))
(assert (not (str.contains (str.++ (str.++ L2 "b" )"a" )"BB" )))
(assert (not (str.contains L4 "AB" )))
(assert (not (= "" (str.++ L6 sym7 sym5 ))))
(assert (str.contains sym7 "Bb" ))
(assert (not (= "" L16 )))
(assert (not (= "" (str.++ sym5 sym7 ))))
(assert (not (= L6 "Ba" )))
(assert (str.contains (str.++ L2 "b" )"ba" ))
(assert (not (= (str.++ (str.++ (str.++ sym7 sym5 )"a" )"A" )"" )))
(assert (not (= L14 "aA" )))
(assert (not (str.contains (str.++ sym7 sym5 )"Ab" )))
(assert (str.contains L29 "b" ))
(assert (not (= (str.++ (str.++ L6 "B" )L0 )"" )))
(assert (str.contains L11 "aa" ))
(assert (str.contains (str.++ (str.++ (str.++ sym7 "A" )L6 )"A" )"aa" ))
(assert (not (= "" (str.++ (str.++ sym7 sym5 )"a" ))))
(assert (not (= sym8 "Aa" )))
(assert (not (= L18 "b" )))
(assert (not (= (str.++ (str.++ sym9 sym6 )sym9 "b" )"" )))
(assert (not (= "" L37 )))
(assert (not (= "" sym9 )))
(assert (not (= "" L38 )))
(assert (not (= "" L40 )))
(assert (str.contains L3 "" ))
(assert (not (= sym6 "" )))
(assert (not (= (str.++ sym7 "A" )"" )))
(assert (not (= "" (str.++ sym8 sym6 ))))
(assert (not (= L43 "a" )))
(assert (str.contains L16 "" ))
(assert (not (= L46 "" )))
(assert (not (= L11 "bA" )))
(assert (str.contains (str.++ L6 "B" )"B" ))
(assert (str.contains L6 "" ))
(assert (str.contains (str.++ L4 sym7 "A" )"" ))
(assert (str.contains L52 "" ))
(assert (not (= "" (str.++ L43 L14 ))))
(assert (not (= "" (str.++ sym7 sym5 ))))
(assert (not (= L2 "aa" )))
(assert (not (= L6 "" )))
(assert (str.contains (str.++ L0 "A" )"" ))
(assert (not (= (str.++ (str.++ sym7 "A" )"a" )"a" )))
(check-sat)
(get-model)
(exit)
