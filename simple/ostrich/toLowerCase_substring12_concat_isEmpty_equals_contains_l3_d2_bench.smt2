(set-logic QF_S)
(set-option :parse-transducers true)
(set-option :produce-models true)
(define-fun-rec toLower ((x String) (y String)) Bool
   (or (and (= x "") (= y ""))
       (and (not (= x "")) (not (= y ""))
           (= (char.code (str.head y))
               (ite (and (<= 65 (char.code (str.head x)))
                       (<= (char.code (str.head x)) 90))
                   (+ (char.code (str.head x)) 32)
                   (char.code (str.head x))))
           (toLower (str.tail x) (str.tail y))))
)
(declare-fun sym9 () String)
(declare-fun sym7 () String)
(declare-fun sym8 () String)
(declare-fun sym11 () String)
(declare-fun sym10 () String)
(declare-fun L13  () String)
(declare-fun L7  () String)
(declare-fun L5  () String)
(declare-fun L10  () String)
(declare-fun L6  () String)
(declare-fun L11  () String)
(declare-fun L22  () String)
(declare-fun L1  () String)
(declare-fun L2  () String)
(declare-fun L0  () String)
(declare-fun L17  () String)
(declare-fun L29  () String)
(define-fun Alphabet () RegLan 
	(re.* (re.union (str.to_re "A") (str.to_re "B") (str.to_re "C") (str.to_re "a") (str.to_re "b") (str.to_re "c") ))
)
(assert (toLower sym7  L29 ))
(assert (toLower (str.substr sym10  2 0) L17 ))
(assert (toLower (str.substr sym10  1 2) L0 ))
(assert (toLower (str.substr sym10  3 0) L2 ))
(assert (toLower sym11  L1 ))
(assert (toLower (str.substr sym9  0 1) L22 ))
(assert (toLower sym9  L11 ))
(assert (toLower (str.substr sym10  0 1) L6 ))
(assert (toLower (str.substr sym10  2 1) L10 ))
(assert (toLower sym10  L5 ))
(assert (toLower L1  L7 ))
(assert (toLower L11  L13 ))

(assert (str.in_re sym10 Alphabet))
(assert (str.in_re sym11 Alphabet))
(assert (str.in_re sym8 Alphabet))
(assert (str.in_re sym7 Alphabet))
(assert (str.in_re sym9 Alphabet))
(assert (not (str.contains (str.substr sym10  2 0)"A" )))
(assert (= "" (str.substr (str.substr sym8  0 1) 0 0)))
(assert (not (= (str.substr (str.++ sym7 sym9 ) 4 2)"B" )))
(assert (not (= L0 "" )))
(assert (= (str.substr L1  2 0)"" ))
(assert (not (= "" (str.++ sym11 sym10 ))))
(assert (not (str.contains L2 "B" )))
(assert (not (str.contains (str.substr (str.substr sym10  1 2) 0 1)"ba" )))
(assert (not (= (str.substr sym8  3 0)"AC" )))
(assert (str.contains (str.++ L1 sym7 sym10 )"b" ))
(assert (not (= "" (str.substr sym10  2 1))))
(assert (not (= "" (str.++ sym7 sym9 ))))
(assert (not (str.contains (str.++ sym10 sym9 )"A" )))
(assert (not (str.contains L1 "bc" )))
(assert (not (= L5 "B" )))
(assert (not (str.contains (str.++ sym10 "B" )"A" )))
(assert (not (str.contains L6 "AB" )))
(assert (str.contains L7 "a" ))
(assert (str.contains (str.substr sym10  1 2)"a" ))
(assert (not (= sym11 "a" )))
(assert (not (= "" sym10 )))
(assert (str.contains L5 "c" ))
(assert (= "" (str.substr sym10  3 0)))
(assert (str.contains L10 "" ))
(assert (not (str.contains (str.++ sym7 sym11 )"aa" )))
(assert (= "" (str.substr (str.substr sym8  3 0) 0 0)))
(assert (str.contains (str.++ sym10 sym8 )"" ))
(assert (not (= (str.++ (str.++ sym10 sym9 )"c" )"B" )))
(assert (not (= "" (str.++ sym7 "c" ))))
(assert (not (= L11 "ab" )))
(assert (not (= L1 "" )))
(assert (str.contains L13 "" ))
(assert (not (= "" (str.++ L1 (str.substr sym11  3 0)))))
(assert (str.contains L11 "c" ))
(assert (not (= "" (str.++ (str.++ sym7 sym11 )"b" ))))
(assert (not (str.contains L17 "A" )))
(assert (not (= (str.substr sym10  0 1)"" )))
(assert (not (= "" (str.++ (str.substr sym8  3 0)"C" ))))
(assert (not (str.contains (str.substr (str.substr sym9  3 0) 0 0)"aa" )))
(assert (str.contains L1 "" ))
(assert (not (= L11 "A" )))
(assert (not (= "" (str.++ L1 "A" ))))
(assert (not (= "" (str.substr L1  0 2))))
(assert (not (= "" (str.substr sym8  0 1))))
(assert (not (= (str.++ (str.++ sym7 "c" )"b" )"" )))
(assert (not (= (str.++ (str.++ sym10 sym8 )sym7 "a" )"" )))
(assert (not (= (str.substr (str.substr sym9  3 0) 0 0)"Ac" )))
(assert (not (= L22 "" )))
(assert (not (= (str.++ sym7 sym10 )"" )))
(assert (not (= "" sym7 )))
(assert (str.contains sym8 "" ))
(assert (not (= "" (str.++ sym7 "a" ))))
(assert (not (= "" (str.substr L11  0 3))))
(assert (not (str.contains L22 "a" )))
(assert (not (= "" (str.++ sym9 "c" ))))
(assert (not (= (str.substr (str.++ sym7 sym11 ) 6 0)"B" )))
(assert (not (= sym9 "" )))
(assert (not (= L1 "" )))
(assert (not (= "" (str.++ L5 sym11 sym10 ))))
(assert (= "" (str.substr sym9  3 0)))
(assert (not (= L13 "" )))
(assert (= (str.substr sym11  3 0)"" ))
(assert (not (= (str.substr sym9  0 1)"aa" )))
(assert (not (= "" (str.++ (str.++ sym7 sym11 )"c" ))))
(assert (not (= "" L29 )))
(check-sat)
(get-model)
(exit)
