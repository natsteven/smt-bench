(set-logic ALL)
(set-option :produce-models true)
(set-option :smt.string_solver z3str3)
(define-fun-rec str.toLower ((x String)) String
  (ite (= x "")
      ""
      (let ((Head (str.at x 0)))
        (str.++ 
          (ite (and (<= 65 (str.to_code Head)) 
                     (<= (str.to_code Head) 90))
               (str.from_code (+ (str.to_code Head) 32))
               Head)
          (str.toLower (str.substr x 1 (- (str.len x) 1)))))))
(declare-fun sym9 () String)
(assert (<= (str.len sym9) 2))
(declare-fun sym7 () String)
(assert (<= (str.len sym7) 2))
(declare-fun sym8 () String)
(assert (<= (str.len sym8) 2))
(declare-fun sym11 () String)
(assert (<= (str.len sym11) 2))
(declare-fun sym10 () String)
(assert (<= (str.len sym10) 2))
(define-fun Alphabet () RegLan 
	(re.* (re.union (str.to_re "A") (str.to_re "B") (str.to_re "C") (str.to_re "a") (str.to_re "b") (str.to_re "c") ))
)

(assert (str.in_re sym10 Alphabet))
(assert (str.in_re sym11 Alphabet))
(assert (str.in_re sym8 Alphabet))
(assert (str.in_re sym7 Alphabet))
(assert (str.in_re sym9 Alphabet))
(assert (not (= "" (str.toLower (str.toLower sym10 )))))
(assert (not (= sym9 "B" )))
(assert (not (= (str.toLower (str.toLower sym9 ))"BB" )))
(assert (not (= (str.toLower sym8 )"" )))
(assert (not (= "" (str.toLower sym9 ))))
(assert (not (= "" (str.toLower sym10 ))))
(assert (not (= (str.toLower (str.toLower sym8 ))"" )))
(assert (not (str.contains (str.toLower sym9 )"bb" )))
(assert (not (= (str.toLower sym10 )"c" )))
(assert (not (str.contains (str.toLower sym9 )"aa" )))
(assert (not (= "" sym10 )))
(assert (not (str.contains (str.toLower (str.toLower sym9 ))"A" )))
(assert (not (= sym7 "" )))
(assert (not (= (str.toLower (str.toLower sym9 ))"" )))
(assert (not (= "" (str.toLower (str.toLower sym7 )))))
(assert (not (= "" (str.toLower (str.toLower sym7 )))))
(assert (not (str.contains (str.toLower (str.toLower sym7 ))"B" )))
(assert (not (str.contains (str.toLower sym7 )"cA" )))
(assert (not (str.contains sym8 "ba" )))
(assert (not (= "" (str.toLower sym10 ))))
(assert (not (= "" (str.toLower (str.toLower sym10 )))))
(assert (not (str.contains (str.toLower (str.toLower sym8 ))"AB" )))
(assert (not (= "" sym11 )))
(assert (not (= (str.toLower sym7 )"" )))
(assert (not (= "" (str.toLower sym7 ))))
(check-sat)
(get-model)
(exit)
