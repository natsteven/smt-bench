(set-logic QF_S)
(set-option :parse-transducers true)
;(set-option :produce-models true)


(define-fun-rec toLower ((x String) (y String)) Bool
	(or (and (= x "") (= y ""))
		(and (not (= x "")) (not (= y ""))
			(= (char.code (str.head y))
				(ite (and (<= 65 (char.code (str.head x)))
						(<= (char.code (str.head x)) 90))
					(+ (char.code (str.head x)) 32)
					(char.code (str.head x))))
			(toLower (str.tail x) (str.tail y))))
)
(declare-fun r10 () String)
(declare-fun r10L () String)
(declare-fun r10LL () String)
(declare-fun r9 () String)
(declare-fun r9L () String)
(declare-fun r9LL () String)
(declare-fun r8 () String)
(declare-fun r8L () String)
(declare-fun r8LL () String)
(declare-fun r7 () String)
(declare-fun r7L () String)
(declare-fun r7LL () String)
(declare-fun r11 () String)

(assert (toLower r10 r10L))
(assert (toLower r10L r10LL))
(assert (toLower r9 r9L))
(assert (toLower r9L r9LL))
(assert (toLower r8 r8L))
(assert (toLower r8L r8LL))
(assert (toLower r7 r7L))
(assert (toLower r7L r7LL))

(assert (not (= "" r10LL)))
(assert (not (= r9 "B" )))
(assert (not (= "BB" r9LL)))
(assert (not (= "" r8L)))
(assert (not (= "" r9L)))
(assert (not (= "" r10L)))
(assert (not (= "" r8LL)))
(assert (not (str.contains r9L "bb")))
(assert (not (= "c" r10L)))
(assert (not (str.contains r9L "aa")))
(assert (not (= "" r10 )))
(assert (not (str.contains r9LL "A")))
(assert (not (= r7 "" )))
(assert (not (= "" r9LL)))
(assert (not (= "" r7LL)))
(assert (not (str.contains r7LL "B")))
(assert (not (str.contains r7L "cA")))
(assert (not (str.contains r8 "ba" )))
(assert (not (= "" r10L)))
(assert (not (str.contains r8LL "AB")))
(assert (not (= "" r11 )))
(assert (not (= r7L "")))
(check-sat)
(get-model)