(set-logic QF_S)
(set-option :produce-models true)
(declare-fun r4 () String)
(declare-fun r5 () String)
(declare-fun r6 () String)
(declare-fun r7 () String)
(declare-fun r8 () String)
(define-fun str.del ((x String) (a Int) (b Int)) String
  (str.++ (str.substr x 0 a) (str.substr x b (str.len x))))

(assert (not (= (str.del (str.del r4  2 2) 0 2)"BC" )))
(assert (not (= (str.del (str.del r7  2 2) 2 2)"BB" )))
(assert (str.contains (str.del (str.del r6  1 1) 2 2)"C" ))
(assert (not (= r7 "A" )))
(assert (not (= "" r6 )))
(assert (not (= "" r8 )))
(assert (not (= "" (str.del r4  2 2))))
(assert (not (str.contains r5 "B" )))
(assert (not (= r4 "BB" )))
(assert (not (= "" (str.del r7  1 1))))
(assert (str.contains (str.del (str.del r6  1 1) 2 2)"" ))
(assert (= "" (str.del (str.del r6  1 1) 0 2)))
(assert (str.contains (str.del r4  2 2)"" ))
(assert (not (= "" (str.del r7  1 2))))
(assert (not (= (str.del (str.del r7  1 2) 0 0)"A" )))
(assert (not (= "" (str.del (str.del r6  2 2) 0 0))))
(assert (str.contains (str.del (str.del r7  1 2) 1 1)"B" ))
(assert (= "" (str.del (str.del r7  1 2) 0 1)))
(assert (not (= "" (str.del r7  2 2))))
(assert (not (= (str.del r6  2 2)"" )))
(assert (str.contains (str.del r5  0 1)"" ))
(assert (not (= (str.del r6  2 2)"B" )))
(assert (str.contains (str.del r6  1 1)"" ))
(assert (not (= "" (str.del (str.del r6  2 2) 1 2))))
(assert (not (= (str.del r6  0 2)"B" )))
(check-sat)
(get-model)
(exit)
