(set-logic ALL)
(set-option :produce-models true)
(declare-fun r10 () String)
(declare-fun r11 () String)
(declare-fun r7 () String)
(declare-fun r8 () String)
(declare-fun r9 () String)
(define-fun-rec str.toLower ((x String)) String
  (ite (= x "")
      ""
      (let ((Head (str.at x 0)))
        (str.++ 
          (ite (and (<= 65 (str.to_code Head)) 
                     (<= (str.to_code Head) 90))
               (str.from_code (+ (str.to_code Head) 32))
               Head)
          (str.toLower (str.substr x 1 (- (str.len x) 1)))))))

(assert (not (= "" (str.toLower (str.toLower r10 )))))
(assert (not (= r9 "B" )))
(assert (not (= (str.toLower (str.toLower r9 ))"BB" )))
(assert (not (= (str.toLower r8 )"" )))
(assert (not (= "" (str.toLower r9 ))))
(assert (not (= "" (str.toLower r10 ))))
(assert (not (= (str.toLower (str.toLower r8 ))"" )))
(assert (not (str.contains (str.toLower r9 )"bb" )))
(assert (not (= (str.toLower r10 )"c" )))
(assert (not (str.contains (str.toLower r9 )"aa" )))
(assert (not (= "" r10 )))
(assert (not (str.contains (str.toLower (str.toLower r9 ))"A" )))
(assert (not (= r7 "" )))
(assert (not (= (str.toLower (str.toLower r9 ))"" )))
(assert (not (= "" (str.toLower (str.toLower r7 )))))
(assert (not (= "" (str.toLower (str.toLower r7 )))))
(assert (not (str.contains (str.toLower (str.toLower r7 ))"B" )))
(assert (not (str.contains (str.toLower r7 )"cA" )))
(assert (not (str.contains r8 "ba" )))
(assert (not (= "" (str.toLower r10 ))))
(assert (not (= "" (str.toLower (str.toLower r10 )))))
(assert (not (str.contains (str.toLower (str.toLower r8 ))"AB" )))
(assert (not (= "" r11 )))
(assert (not (= (str.toLower r7 )"" )))
(assert (not (= "" (str.toLower r7 ))))
(check-sat)
(get-model)
(exit)
