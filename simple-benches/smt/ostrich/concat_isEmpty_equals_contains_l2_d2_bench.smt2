(set-logic QF_S)
(set-option :parse-transducers true)
(set-option :produce-models true)
(declare-fun r4 () String)
(declare-fun r5 () String)
(declare-fun r6 () String)
(declare-fun r7 () String)
(declare-fun r8 () String)

(assert r4 )
(assert r5 )
(assert r6 )
(assert r7 )
(assert r8 )
(assert (not (= "" (str.++ (str.++ r6 r4 )r6 r4 ))))
(assert (not (= r8 "B" )))
(assert (not (= (str.++ (str.++ r5 "B" )"C" )"B" )))
(assert (not (= (str.++ r7 r5 )"A" )))
(assert (not (= "" (str.++ r7 "C" ))))
(assert (not (= "" (str.++ r6 "C" ))))
(assert (not (= (str.++ (str.++ r5 r8 )"B" )"" )))
(assert (str.contains (str.++ r5 "B" )"" ))
(assert (not (= (str.++ r7 r6 )"" )))
(assert (str.contains (str.++ r6 r4 )"CB" ))
(assert (not (= "" r4 )))
(assert (str.contains (str.++ (str.++ r5 "B" )"A" )"B" ))
(assert (not (= r6 "B" )))
(assert (not (= (str.++ (str.++ r4 "C" )r6 r4 )"C" )))
(assert (not (= "" (str.++ (str.++ r6 "C" )"C" ))))
(assert (not (= "" (str.++ (str.++ r6 "C" )r6 r4 ))))
(assert (str.contains (str.++ (str.++ r6 "C" )r7 "C" )"" ))
(assert (str.contains (str.++ r4 "B" )"" ))
(assert (not (str.contains r5 "A" )))
(assert (not (= "" (str.++ r4 "C" ))))
(assert (not (= "" (str.++ (str.++ r5 r8 )"B" ))))
(assert (str.contains (str.++ (str.++ r7 "C" )"A" )"C" ))
(assert (not (= "" r7 )))
(assert (not (= (str.++ r6 r4 )"A" )))
(assert (not (= "" (str.++ r5 r8 ))))
(check-sat)
(get-model)
(exit)
