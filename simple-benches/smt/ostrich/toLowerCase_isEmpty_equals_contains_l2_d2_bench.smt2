(set-logic QF_S)
(set-option :parse-transducers true)
(set-option :produce-models true)
(define-fun-rec toLower ((x String) (y String)) Bool
   (or (and (= x "") (= y ""))
       (and (not (= x "")) (not (= y ""))
           (= (char.code (str.head y))
               (ite (and (<= 65 (char.code (str.head x)))
                       (<= (char.code (str.head x)) 90))
                   (+ (char.code (str.head x)) 32)
                   (char.code (str.head x))))
           (toLower (str.tail x) (str.tail y))))
)
(declare-fun r10 () String)
(declare-fun r11 () String)
(declare-fun r7 () String)
(declare-fun r8 () String)
(declare-fun r9 () String)
(declare-fun L7  () String)
(declare-fun L3  () String)
(declare-fun L4  () String)
(declare-fun L1  () String)
(declare-fun L2  () String)
(declare-fun L16  () String)
(declare-fun L0  () String)
(declare-fun L17  () String)
(assert (toLower r7  L17 ))
(assert (toLower L1  L0 ))
(assert (toLower L17  L16 ))
(assert (toLower L3  L2 ))
(assert (toLower r10  L1 ))
(assert (toLower r8  L4 ))
(assert (toLower r9  L3 ))
(assert (toLower L4  L7 ))

(assert "A" )
(assert "B" )
(assert "C" )
(assert "a" )
(assert "b" )
(assert "c" )
(assert (not (= "" L0 )))
(assert (not (= r9 "B" )))
(assert (not (= L2 "BB" )))
(assert (not (= L4 "" )))
(assert (not (= "" L3 )))
(assert (not (= "" L1 )))
(assert (not (= L7 "" )))
(assert (not (str.contains L3 "bb" )))
(assert (not (= L1 "c" )))
(assert (not (str.contains L3 "aa" )))
(assert (not (= "" r10 )))
(assert (not (str.contains L2 "A" )))
(assert (not (= r7 "" )))
(assert (not (= L2 "" )))
(assert (not (= "" L16 )))
(assert (not (= "" L16 )))
(assert (not (str.contains L16 "B" )))
(assert (not (str.contains L17 "cA" )))
(assert (not (str.contains r8 "ba" )))
(assert (not (= "" L1 )))
(assert (not (= "" L0 )))
(assert (not (str.contains L7 "AB" )))
(assert (not (= "" r11 )))
(assert (not (= L17 "" )))
(assert (not (= "" L17 )))
(check-sat)
(get-model)
(exit)
