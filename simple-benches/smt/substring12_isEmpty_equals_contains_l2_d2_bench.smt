(set-logic QF_S)
(set-option :produce-models true)
(declare-fun r4 () String)
(declare-fun r5 () String)
(declare-fun r6 () String)
(declare-fun r7 () String)
(declare-fun r8 () String)

(assert (not (= (str.substr (str.substr r4  2 0) 0 0)"BC" )))
(assert (not (= (str.substr (str.substr r7  2 0) 0 0)"BB" )))
(assert (not (str.contains (str.substr (str.substr r6  1 0) 0 0)"C" )))
(assert (not (= r7 "A" )))
(assert (not (= "" r6 )))
(assert (not (= "" r8 )))
(assert (= "" (str.substr r4  2 0)))
(assert (not (str.contains r5 "B" )))
(assert (not (= r4 "BB" )))
(assert (= "" (str.substr r7  1 0)))
(assert (str.contains (str.substr (str.substr r6  1 0) 0 0)"" ))
(assert (= "" (str.substr (str.substr r6  1 0) 0 0)))
(assert (str.contains (str.substr r4  2 0)"" ))
(assert (not (= "" (str.substr r7  1 1))))
(assert (not (= (str.substr (str.substr r7  1 1) 0 0)"A" )))
(assert (= "" (str.substr (str.substr r6  2 0) 0 0)))
(assert (not (str.contains (str.substr (str.substr r7  1 1) 1 0)"B" )))
(assert (not (= "" (str.substr (str.substr r7  1 1) 0 1))))
(assert (= "" (str.substr r7  2 0)))
(assert (= (str.substr r6  2 0)"" ))
(assert (str.contains (str.substr r5  0 1)"" ))
(assert (not (= (str.substr r6  2 0)"B" )))
(assert (str.contains (str.substr r6  1 0)"" ))
(assert (= "" (str.substr (str.substr r6  2 0) 0 0)))
(assert (not (= (str.substr r6  0 2)"B" )))
(check-sat)
(get-model)
(exit)
