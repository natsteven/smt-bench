(set-logic QF_S)
(set-option :produce-models true)
(declare-fun r4 () String)
(declare-fun r5 () String)
(declare-fun r6 () String)
(declare-fun r7 () String)
(declare-fun r8 () String)

(assert (not (= (str.replace_all r4  "C"  "B" )"CB" )))
(assert (not (= r8 "B" )))
(assert (not (= "" r7 )))
(assert (not (= (str.replace_all r7  "C"  "B" )"" )))
(assert (not (= "" (str.replace_all (str.replace_all r7  "B"  "C" ) "C"  "A" ))))
(assert (not (= "" r4 )))
(assert (not (str.contains (str.replace_all (str.replace_all r7  "B"  "C" ) "B"  "C" )"B" )))
(assert (not (= "" (str.replace_all (str.replace_all r7  "A"  "C" ) "B"  "A" ))))
(assert (not (= r6 "" )))
(assert (not (= (str.replace_all r7  "B"  "C" )"" )))
(assert (str.contains (str.replace_all (str.replace_all r6  "B"  "C" ) "C"  "B" )"" ))
(assert (str.contains (str.replace_all r5  "A"  "B" )"" ))
(assert (not (= "" (str.replace_all r4  "C"  "B" ))))
(assert (not (str.contains (str.replace_all r5  "A"  "B" )"B" )))
(assert (not (= (str.replace_all (str.replace_all r7  "C"  "B" ) "A"  "B" )"A" )))
(assert (not (= (str.replace_all (str.replace_all r5  "A"  "B" ) "A"  "C" )"BB" )))
(assert (not (= "" (str.replace_all (str.replace_all r6  "C"  "A" ) "A"  "C" ))))
(assert (not (= (str.replace_all (str.replace_all r6  "C"  "A" ) "B"  "C" )"BC" )))
(assert (not (str.contains r5 "BB" )))
(assert (not (= "" (str.replace_all r7  "A"  "C" ))))
(assert (not (= "" (str.replace_all r6  "B"  "C" ))))
(assert (not (str.contains (str.replace_all r6  "A"  "C" )"B" )))
(assert (not (str.contains (str.replace_all (str.replace_all r4  "C"  "B" ) "C"  "A" )"AA" )))
(assert (not (= "" (str.replace_all r6  "C"  "A" ))))
(assert (not (= "" (str.replace_all (str.replace_all r4  "C"  "B" ) "B"  "A" ))))
(check-sat)
(get-model)
(exit)
